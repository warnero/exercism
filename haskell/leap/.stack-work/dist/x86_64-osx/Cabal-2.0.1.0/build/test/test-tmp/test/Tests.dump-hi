
==================== FINAL INTERFACE ====================
2018-01-16 18:02:45.935541 UTC

interface main:Main 8022
  interface hash: eb14966267864ca249dc3ce436e84c93
  ABI hash: e7fff6a1b8ffdca93335a75522c47ebe
  export-list hash: d092cdbeb2880c7d04eb13e34019b057
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ceba4ce9de875b2bad78653ef2c6ae33
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: HUnit-1.6.0.0 QuickCheck-2.10.1
                      ansi-terminal-0.7.1.1 array-0.5.2.0 async-2.1.1.1 base-4.10.1.0
                      call-stack-0.1.0 colour-2.3.4 containers-0.5.10.2 deepseq-1.4.3.0
                      directory-1.3.0.2 filepath-1.4.1.2 ghc-boot-th-8.2.2
                      ghc-prim-0.5.1.1 hspec-2.4.4 hspec-core-2.4.4
                      hspec-expectations-0.8.2 integer-gmp-1.0.1.0 leap-1.2.0.5
                      pretty-1.1.3.3 primitive-0.6.2.0 quickcheck-io-0.2.0 random-1.1
                      setenv-0.1.1.3 stm-2.4.4.1 template-haskell-2.12.0.0 tf-random-0.5
                      time-1.8.0.2 transformers-0.5.2.0 unix-2.7.2.2
orphans: colour-2.3.4:Data.Colour
         quickcheck-io-0.2.0:Test.QuickCheck.IO
         transformers-0.5.2.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         stm-2.4.4.1:Control.Monad.STM base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         hspec-core-2.4.4:Test.Hspec.Core.Example
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0:Control.Monad.Primitive
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.OldList 555420b092ca8cf0a8f9666bc0e07dcf
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  hspec-2.4.4:Test.Hspec 917f73e7880f4d00e7f96bf294ccc197
import  -/  hspec-2.4.4:Test.Hspec.Runner 76ee7a45c2f90c0efa69a5b4a82c0d59
import  -/  hspec-core-2.4.4:Test.Hspec.Core.Options bb781f7ab113f22dac5250ef654e6b99
import  -/  hspec-core-2.4.4:Test.Hspec.Core.Runner dcbaaf75cc4a7da1f1e0ae3788372a84
import  -/  hspec-core-2.4.4:Test.Hspec.Core.Spec 4371b0f2302c6aee07c9624d075941a2
import  -/  hspec-core-2.4.4:Test.Hspec.Core.Spec.Monad ab7f07f5b1a38960f1f314c9b4df6b9c
import  -/  hspec-expectations-0.8.2:Test.Hspec.Expectations 8bc0d926d5b42398a254e04604809fe4
import  -/  integer-gmp-1.0.1.0:GHC.Integer.Type 5fa81108482c33b62ec3ac7464eece96
import  -/  leap-1.2.0.5:LeapYear e34c0ddcaa0c31d43b2866a4b8945122
a18e4bb2f0674ee24612719199a84dab
  $tc'Case :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8197111133229858407##
                   13847006553897280588##
                   Main.$trModule
                   Main.$tc'Case2
                   0#
                   Main.$tc'Case1) -}
8f010006a57838aae2252530b9cbf5fc
  $tc'Case1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b4f883606fd905089344438718b2c630
  $tc'Case2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Case3) -}
b70b9a2f50a01b383c0fc203a93b45f6
  $tc'Case3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Case"#) -}
fb54e6971b8cdb3d6eb813b73e5967b8
  $tcCase :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   990021888930651814##
                   4262142848388084561##
                   Main.$trModule
                   Main.$tcCase1
                   0#
                   GHC.Types.krep$*) -}
d6f1567c5e9fb74d00e1be64470ce3d3
  $tcCase1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcCase2) -}
7179be3aa9b5f07778c569f16b1ed2bf
  $tcCase2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Case"#) -}
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
273a9bb6e92f6828d45ea38dc4b3769b
  $wf1 ::
    GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> GHC.Types.Bool
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           [Test.Hspec.Core.Tree.SpecTree
              (Test.Hspec.Core.Example.Arg
                 Test.Hspec.Expectations.Expectation)]) #)
  {- Arity: 4, Strictness: <L,1*U><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (ww2 :: GHC.Types.Bool)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# w,
                    (GHC.Tuple.(),
                     GHC.Types.:
                       @ (Test.Hspec.Core.Tree.SpecTree
                            (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                       (Test.Hspec.Core.Tree.Leaf
                          @ (Test.Hspec.Core.Example.ActionWith
                               (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                          @ (Test.Hspec.Core.Tree.Item
                               (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                          (Test.Hspec.Core.Tree.Item
                             @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                             (case GHC.Show.$w$cshowsPrec4
                                     0#
                                     ww1
                                     (GHC.Types.[] @ GHC.Types.Char) of ww3 { (#,#) ww4 ww5 ->
                              case GHC.Base.++
                                     @ GHC.Types.Char
                                     (GHC.Types.: @ GHC.Types.Char ww4 ww5)
                                     (GHC.Types.:
                                        @ GHC.Types.Char
                                        Main.main37
                                        (GHC.Base.++
                                           @ GHC.Types.Char
                                           Main.main35
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              Main.main37
                                              (GHC.Base.++
                                                 @ GHC.Types.Char
                                                 ww
                                                 (GHC.Types.[] @ GHC.Types.Char))))) of wild {
                                [] -> Test.Hspec.Core.Tree.specItem1 : ds1 ds2 -> wild } })
                             Main.main21
                             GHC.Types.False
                             (Test.Hspec.Core.Example.safeEvaluateExample1
                                @ Test.Hspec.Expectations.Expectation
                                Test.Hspec.Core.Example.$fExampleIO1
                                  `cast`
                                (Trans
                                     (<Test.Hspec.Expectations.Expectation>_R
                                      ->_R <Test.Hspec.Core.Example.Params>_R
                                      ->_R <(Test.Hspec.Core.Example.Arg
                                               Test.Hspec.Expectations.Expectation
                                             -> GHC.Types.IO ())
                                            -> GHC.Types.IO ()>_R
                                      ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Test.Hspec.Core.Example.Result>_R))
                                     (Sym (Test.Hspec.Core.Example.N:Example[0]
                                               <Test.Hspec.Expectations.Expectation>_N)))
                                (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                 case LeapYear.isLeapYear ww1 of wild {
                                   GHC.Types.False
                                   -> case ww2 of wild1 {
                                        GHC.Types.False -> (# eta2, GHC.Tuple.() #)
                                        GHC.Types.True -> Main.main20 eta2 }
                                   GHC.Types.True
                                   -> case ww2 of wild1 {
                                        GHC.Types.False -> Main.main19 eta2
                                        GHC.Types.True -> (# eta2, GHC.Tuple.() #) } })
                                  `cast`
                                (Sym (GHC.Types.N:IO[0] <()>_R)))
                               `cast`
                             (<Test.Hspec.Core.Example.Params>_R
                              ->_R <Test.Hspec.Core.Example.ActionWith
                                      (Test.Hspec.Core.Example.Arg
                                         Test.Hspec.Expectations.Expectation)
                                    -> GHC.Types.IO ()>_R
                              ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                              ->_R Sym (GHC.Types.N:IO[0]
                                            <Data.Either.Either
                                               GHC.Exception.SomeException
                                               Test.Hspec.Core.Example.Result>_R))))
                       (GHC.Types.[]
                          @ (Test.Hspec.Core.Tree.SpecTree
                               (Test.Hspec.Core.Example.Arg
                                  Test.Hspec.Expectations.Expectation)))) #)) -}
561b8977a15adbf0ee60212c083d6af3
  data Case
    = Case {description :: GHC.Base.String,
            input :: GHC.Integer.Type.Integer,
            expected :: GHC.Types.Bool}
561b8977a15adbf0ee60212c083d6af3
  description :: Main.Case -> GHC.Base.String
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 -> ds1 }) -}
561b8977a15adbf0ee60212c083d6af3
  expected :: Main.Case -> GHC.Types.Bool
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 -> ds3 }) -}
561b8977a15adbf0ee60212c083d6af3
  input :: Main.Case -> GHC.Integer.Type.Integer
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 -> ds2 }) -}
a3de7fbb861f6e299ad974235a66dea7
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
3bfa5e6be59087ef5df3de2e05ebb027
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.Hspec.Core.Runner.hspec2
                        Main.main38
                        Main.main2
                          `cast`
                        (Trans
                             (Sym (GHC.Types.N:IO[0]
                                       <((), [Test.Hspec.Core.Tree.SpecTree ()])>_R))
                             (Trans
                                  (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                            <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                            <GHC.Types.IO>_R
                                            <()>_N))
                                  (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0] <()>_N) <()>_N)))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { Test.Hspec.Core.Runner.Summary ds ds2 ->
                 case ds2 of wild1 { GHC.Types.I# x ->
                 case x of wild2 {
                   DEFAULT -> System.Exit.exitFailure1 @ () ipv
                   0# -> (# ipv, GHC.Tuple.() #) } } } }) -}
eaa4ead8040e14b98e40f41dbac74950
  main10 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2100) -}
701fe635c55859322f3e82d051a3be6a
  main11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main12) -}
240135fa2f2f81033b26184fa55b59c4
  main12 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("year divisible by 100, not divisible by 400: common year"#) -}
8b0a693f62614bc948eb4669cad372e5
  main13 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1996) -}
1ff869db3127a3ff70d075a4a81fa7b3
  main14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main15) -}
fc102d247f6cd7d8ca63a210f2d8bfb1
  main15 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("year divisible by 4, not divisible by 100: leap year"#) -}
89f9d5d954923a0b4e5fa60c998102dc
  main16 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2015) -}
6fc07495dc12374004f0cd3aab54bf46
  main17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main18) -}
07e615c4492e15757f154b22cce7a942
  main18 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("year not divisible by 4: common year"#) -}
166f3e7d1b7ec0de8b965c2a036a3f26
  main19 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
3eb97a4a9d7fc7821b75cb677d3c83a3
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           [Test.Hspec.Core.Tree.Tree
              (Test.Hspec.Core.Example.ActionWith ())
              (Test.Hspec.Core.Tree.Item ())]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Main.$wf1 Main.main17 Main.main16 GHC.Types.False eta)
                        `cast`
                      (Nth:3
                           (Trans
                                (Sym (GHC.Types.N:IO[0]
                                          <((),
                                            [Test.Hspec.Core.Tree.SpecTree
                                               (Test.Hspec.Core.Example.Arg
                                                  Test.Hspec.Expectations.Expectation)])>_R))
                                (Trans
                                     (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                               <[Test.Hspec.Core.Tree.SpecTree
                                                   (Test.Hspec.Core.Example.Arg
                                                      Test.Hspec.Expectations.Expectation)]>_N
                                               <GHC.Types.IO>_R
                                               <()>_N))
                                     (Trans
                                          (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                    (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0]))) <()>_N)
                                          (Trans
                                               (Nth:2
                                                    (Trans
                                                         (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                              <()>_N <()>_N
                                                          ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                   <()>_N <()>_N
                                                          ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                   <()>_N <()>_N)
                                                         (<Control.Monad.Trans.Writer.Lazy.WriterT
                                                             [Test.Hspec.Core.Tree.SpecTree ()]
                                                             GHC.Types.IO
                                                             ()>_R
                                                          ->_R <Control.Monad.Trans.Writer.Lazy.WriterT
                                                                  [Test.Hspec.Core.Tree.SpecTree ()]
                                                                  GHC.Types.IO
                                                                  ()>_R
                                                          ->_R Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                                   <[Test.Hspec.Core.Tree.SpecTree
                                                                       ()]>_N
                                                                   <GHC.Types.IO>_R
                                                                   <()>_N)))
                                               (Trans
                                                    (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                         <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                         <GHC.Types.IO>_R
                                                         <()>_N)
                                                    (GHC.Types.N:IO[0]
                                                         <((),
                                                           [Test.Hspec.Core.Tree.SpecTree
                                                              ()])>_R))))))) of ds { (#,#) ipv ipv1 ->
                 case (Main.$wf1 Main.main14 Main.main13 GHC.Types.True ipv)
                        `cast`
                      (Nth:3
                           (Trans
                                (Sym (GHC.Types.N:IO[0]
                                          <((),
                                            [Test.Hspec.Core.Tree.SpecTree
                                               (Test.Hspec.Core.Example.Arg
                                                  Test.Hspec.Expectations.Expectation)])>_R))
                                (Trans
                                     (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                               <[Test.Hspec.Core.Tree.SpecTree
                                                   (Test.Hspec.Core.Example.Arg
                                                      Test.Hspec.Expectations.Expectation)]>_N
                                               <GHC.Types.IO>_R
                                               <()>_N))
                                     (Trans
                                          (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                    (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0]))) <()>_N)
                                          (Trans
                                               (Nth:2
                                                    (Trans
                                                         (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                              <()>_N <()>_N
                                                          ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                   <()>_N <()>_N
                                                          ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                   <()>_N <()>_N)
                                                         (<Control.Monad.Trans.Writer.Lazy.WriterT
                                                             [Test.Hspec.Core.Tree.SpecTree ()]
                                                             GHC.Types.IO
                                                             ()>_R
                                                          ->_R <Control.Monad.Trans.Writer.Lazy.WriterT
                                                                  [Test.Hspec.Core.Tree.SpecTree ()]
                                                                  GHC.Types.IO
                                                                  ()>_R
                                                          ->_R Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                                   <[Test.Hspec.Core.Tree.SpecTree
                                                                       ()]>_N
                                                                   <GHC.Types.IO>_R
                                                                   <()>_N)))
                                               (Trans
                                                    (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                         <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                         <GHC.Types.IO>_R
                                                         <()>_N)
                                                    (GHC.Types.N:IO[0]
                                                         <((),
                                                           [Test.Hspec.Core.Tree.SpecTree
                                                              ()])>_R))))))) of ds1 { (#,#) ipv2 ipv3 ->
                 case (Main.$wf1 Main.main11 Main.main10 GHC.Types.False ipv2)
                        `cast`
                      (Nth:3
                           (Trans
                                (Sym (GHC.Types.N:IO[0]
                                          <((),
                                            [Test.Hspec.Core.Tree.SpecTree
                                               (Test.Hspec.Core.Example.Arg
                                                  Test.Hspec.Expectations.Expectation)])>_R))
                                (Trans
                                     (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                               <[Test.Hspec.Core.Tree.SpecTree
                                                   (Test.Hspec.Core.Example.Arg
                                                      Test.Hspec.Expectations.Expectation)]>_N
                                               <GHC.Types.IO>_R
                                               <()>_N))
                                     (Trans
                                          (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                    (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0]))) <()>_N)
                                          (Trans
                                               (Nth:2
                                                    (Trans
                                                         (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                              <()>_N <()>_N
                                                          ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                   <()>_N <()>_N
                                                          ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                   <()>_N <()>_N)
                                                         (<Control.Monad.Trans.Writer.Lazy.WriterT
                                                             [Test.Hspec.Core.Tree.SpecTree ()]
                                                             GHC.Types.IO
                                                             ()>_R
                                                          ->_R <Control.Monad.Trans.Writer.Lazy.WriterT
                                                                  [Test.Hspec.Core.Tree.SpecTree ()]
                                                                  GHC.Types.IO
                                                                  ()>_R
                                                          ->_R Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                                   <[Test.Hspec.Core.Tree.SpecTree
                                                                       ()]>_N
                                                                   <GHC.Types.IO>_R
                                                                   <()>_N)))
                                               (Trans
                                                    (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                         <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                         <GHC.Types.IO>_R
                                                         <()>_N)
                                                    (GHC.Types.N:IO[0]
                                                         <((),
                                                           [Test.Hspec.Core.Tree.SpecTree
                                                              ()])>_R))))))) of ds2 { (#,#) ipv4 ipv5 ->
                 case (Main.$wf1 Main.main8 Main.main7 GHC.Types.True ipv4)
                        `cast`
                      (Nth:3
                           (Trans
                                (Sym (GHC.Types.N:IO[0]
                                          <((),
                                            [Test.Hspec.Core.Tree.SpecTree
                                               (Test.Hspec.Core.Example.Arg
                                                  Test.Hspec.Expectations.Expectation)])>_R))
                                (Trans
                                     (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                               <[Test.Hspec.Core.Tree.SpecTree
                                                   (Test.Hspec.Core.Example.Arg
                                                      Test.Hspec.Expectations.Expectation)]>_N
                                               <GHC.Types.IO>_R
                                               <()>_N))
                                     (Trans
                                          (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                    (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0]))) <()>_N)
                                          (Trans
                                               (Nth:2
                                                    (Trans
                                                         (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                              <()>_N <()>_N
                                                          ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                   <()>_N <()>_N
                                                          ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                   <()>_N <()>_N)
                                                         (<Control.Monad.Trans.Writer.Lazy.WriterT
                                                             [Test.Hspec.Core.Tree.SpecTree ()]
                                                             GHC.Types.IO
                                                             ()>_R
                                                          ->_R <Control.Monad.Trans.Writer.Lazy.WriterT
                                                                  [Test.Hspec.Core.Tree.SpecTree ()]
                                                                  GHC.Types.IO
                                                                  ()>_R
                                                          ->_R Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                                   <[Test.Hspec.Core.Tree.SpecTree
                                                                       ()]>_N
                                                                   <GHC.Types.IO>_R
                                                                   <()>_N)))
                                               (Trans
                                                    (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                         <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                         <GHC.Types.IO>_R
                                                         <()>_N)
                                                    (GHC.Types.N:IO[0]
                                                         <((),
                                                           [Test.Hspec.Core.Tree.SpecTree
                                                              ()])>_R))))))) of ds3 { (#,#) ipv6 ipv7 ->
                 (# ipv6,
                    (GHC.Tuple.(),
                     GHC.Types.:
                       @ (Test.Hspec.Core.Tree.Tree
                            (Test.Hspec.Core.Example.ActionWith ())
                            (Test.Hspec.Core.Tree.Item ()))
                       (Test.Hspec.Core.Tree.Node
                          @ (Test.Hspec.Core.Example.ActionWith ())
                          @ (Test.Hspec.Core.Tree.Item ())
                          Main.main3
                          (case ipv1 of wild { (,) a1 w1 ->
                           GHC.Base.++
                             @ (Test.Hspec.Core.Tree.Tree
                                  (Test.Hspec.Core.Example.ActionWith ())
                                  (Test.Hspec.Core.Tree.Item ()))
                             w1
                             (case ipv3 of wild1 { (,) a2 w2 ->
                              GHC.Base.++
                                @ (Test.Hspec.Core.Tree.Tree
                                     (Test.Hspec.Core.Example.ActionWith ())
                                     (Test.Hspec.Core.Tree.Item ()))
                                w2
                                (case ipv5 of wild2 { (,) a3 w3 ->
                                 GHC.Base.++
                                   @ (Test.Hspec.Core.Tree.Tree
                                        (Test.Hspec.Core.Example.ActionWith ())
                                        (Test.Hspec.Core.Tree.Item ()))
                                   w3
                                   (case ipv7 of wild3 { (,) a4 w4 -> w4 }) }) }) }))
                       (GHC.Types.[]
                          @ (Test.Hspec.Core.Tree.Tree
                               (Test.Hspec.Core.Example.ActionWith ())
                               (Test.Hspec.Core.Tree.Item ())))) #) } } } }) -}
d543f65e4aa40086bbdf34fba33e8987
  main20 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
c0678f52f8714a5dddf96691bc2ecdc7
  main21 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (Test.Hspec.Core.Tree.specItem13 Main.main22) -}
7768794702ab428aff676a937e361132
  main22 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem11
                   Test.Hspec.Core.Tree.specItem3
                   Main.main23) -}
0acd8d719e91d67cfb6bd91f68ab3a75
  main23 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it1
                   Main.main24) -}
7ed6c75557feabff324161e9dfc4c9f3
  main24 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main33
                   Main.main25
                   GHC.Stack.Types.EmptyCallStack) -}
52785d620532e0a3adfa16a0f203dcfc
  main25 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main32
                   Main.main31
                   Main.main29
                   Main.main28
                   Main.main27
                   Main.main28
                   Main.main26) -}
fb4e006307ddefd5111353648075c5b4
  main26 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 45#) -}
71df200e79c8f58931c8be0f741ba8e5
  main27 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 21#) -}
fa3505e4e7ac66b18a4c4b200134156f
  main28 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 17#) -}
fe3f2176fca538b42cff6d138c177cdb
  main29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main30) -}
d325470384692080e416cf63749a51fd
  main3 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.: @ GHC.Types.Char Main.main6 Main.main4) -}
3db6f63d0f71cd0c324ea6234340376b
  main30 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test/Tests.hs"#) -}
a9767ab37e19eb76d1aa6f26915a42dd
  main31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$trModule2) -}
ef84fdaf6aae58a52dad6bac8daf38b8
  main32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$trModule4) -}
df719fa544d8e4f985eb91eac58dd306
  main33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main34) -}
41a05bfe72168217e9ed02762836b7da
  main34 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("it"#) -}
86a0bd138836d7f3aa52b91c5c4b95af
  main35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main36) -}
409b3f12b17deeae4db307f364044043
  main36 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("-"#) -}
685a8df4f8271aa420879ebbe3c4d9f6
  main37 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ' '#) -}
d16f7bbbdf9e771bff6446dbba3e5737
  main38 :: Test.Hspec.Core.Options.Config
  {- Unfolding: (Test.Hspec.Core.Options.Config
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.True
                   (GHC.Base.Nothing @ GHC.IO.FilePath)
                   GHC.Types.False
                   GHC.Types.False
                   (GHC.Base.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Base.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Base.Nothing @ GHC.Integer.Type.Integer)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Test.Hspec.Core.Example.defaultParams1
                   Test.Hspec.Core.Options.ColorAuto
                   GHC.Types.True
                   (GHC.Base.Nothing @ Test.Hspec.Core.Formatters.Monad.Formatter)
                   GHC.Types.False
                   Test.Hspec.Core.Options.defaultConfig1
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
818b63232313f04fad745c00f3b722fe
  main39 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
13da6d4079cc042cec1a6b83d6aa52bf
  main4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main5) -}
bd2fe0d3a4afeba9ce89befd24b53290
  main5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("sLeapYear"#) -}
42960dc9fb15d3203a1231bcb73701dc
  main6 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'i'#) -}
e6d5c06c6e14ca3161074fb13479c061
  main7 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2000) -}
ffb22daad2bb6f8a9b3722746524d27c
  main8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main9) -}
ec062c32d3c7ba9286b3820f39f2ebd9
  main9 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("year divisible by 400: leap year"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

